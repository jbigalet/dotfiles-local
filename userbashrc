# vim:filetype=sh
export EDITOR='vim'
export HISTSIZE=1000000

alias vim="vimx"

alias g="git clone"
alias gs="git status -sb"
alias gss="git status"
alias ga="git add"
alias gau="git add -u"
alias gc="git commit -m"
alias gca="git commit --amend"
alias gl="git log --graph --pretty=format:'%Cred%h%Creset %an: %s - %Creset %C(yellow)%d%Creset %Cgreen(%cr)%Creset' --abbrev-commit --date=relative"
alias gls="git log"
alias gd="git diff"
alias gm="git diff --name-only --diff-filter=U"
alias gdl="git diff HEAD~1"
alias gdlc="git diff HEAD~1 HEAD"
alias gdc="git diff --cached"
alias gdp="git diff @{1}.."
alias gp="git push origin master"
alias gpo="git push origin"
alias gg="git pull --rebase origin master"
alias ggo="git pull --rebase origin"
alias gb="git branch -vv"
alias gba="git branch -vv --all"
alias gbn="git branch"
alias gt="git stash"
alias gtp="git stash pop"
alias gtf="git stash show"
alias gtd="git stash show -p"
alias gtl="git stash list"
alias gh="git checkout"
# __git_complete gh _git_checkout
alias ghn="git checkout -B"
# __git_complete ghn _git_checkout
alias gf="git fetch"
alias gfa="git fetch --all"
alias gfo="git fetch origin"
alias gfoa="git fetch --all origin"
alias gym="git merge"
alias gymm="git merge master"
alias gyma="git merge --abort"
alias gyr="git rebase"
alias gyrm="git rebase master"
alias gyrc="git rebase --continue"
alias gyra="git rebase --abort"
alias gyri="git rebase --interactive"
alias grs="git config --get remote.origin.url"
alias ge="git reflog"
alias grn="git remote add origin"
alias gsh="git show"

alias tarx="tar -zxvf"
alias tarc="tar -zcvf"

alias czsh="vim ~/.zshrc"
alias cvim="vim ~/.vimrc"
alias cbash="vim ~/.userbashrc"
alias cb="cbash"

alias ls="ls --color=auto"
alias ll="ls -Ahltr --color=auto"
alias grep="grep --color=auto"
alias gr="grep -nr"
alias gri="gr -i"
alias j="jobs -l"

alias e="vim"
alias p="ipython"

alias nocaps="setxkbmap -option caps:escape"

alias reload="source ~/.bashrc"

alias tat="tmux attach -t"

alias zl="z -l"

alias np="sh ~/.this/bin/sshnopass"
alias sp="sh ~/.this/bin/sshsetpass"

function mkdir_cd() {
  mkdir -p $1
  cd $1
}
alias cm=mkdir_cd

function removelink() {
  [ -L "$1" ] && cp --remove-destination "$(readlink "$1")" "$1"
}

shopt -s autocd

. ~/.bin/packages/z/z.sh

alias fe="rez env envTools -- rfetch"

function lls() {
  llsr $@ -maxdepth 1
}

function llsr() {
  find $@ -name "*.py" -nowarn -exec wc -l {} + | sort -rn
}

function llsc() {
  find $@ -nowarn -exec wc -l {} + | sort -rn
}

function cdp() {
  package_dir=`rez env libPkg -- cd2pkg $1`
  echo $package_dir
  if [ $? != 0 ]; then
    # $cdp_err=$?
    printf "Impossible to find rez package $1\n"
    # exit $cdp_err
  else
    cd $package_dir
  fi
}

function cdf() {
  fe $1
  cdp $1-dev
}

function asot() {
  fc=~/.asot

  n=$1
  if [[ ! $1 ]]; then
    if [[ -f $fc ]]; then
      n=`cat $fc`
    else
      n=630
    fi
  fi

  echo $((n+1)) > "$fc"

  mplayer -ss 60 http://archive.org/download/Armin_Van_Buuren_-_A_State_Of_Trance_$n/Armin_Van_Buuren_-_A_State_Of_Trance_$n.mp3
}

alias proscope="rez env proscope -- proscope"

function current_workspace(){
  CURRENT=$(($(wmctrl -d | grep "*" | cut -d' ' -f1)+1))

  case $CURRENT in
    6  ) CAPP='Maya'   ;;
    7  ) CAPP='Katana' ;;
    8  ) CAPP='Houdini';;
    9  ) CAPP='Nuke'   ;;
    10 ) CAPP='Mari'   ;;
  esac

  if [[ $CAPP ]]; then
    echo $CAPP
  fi
}

function c() {
  if [[ $@ ]]; then
    rez context | grep $@
  else
    rez context
  fi
}

function re() {
  f=~/.userrezenv

  if [[ $@ ]]; then
    args=$@
    echo $@ > "$f"
  else
    args=`cat $f`
  fi

  cw=$(current_workspace)

  args=${args//@/$cw}
  args=${args//€/${cw,,}}

  echo "rez env $args"
  rez env $args
}

function re+ {
  f=~/.userrezenv

  re `cat $f` $@
}

function re_nolog() {
  f=~/.userrezenv

  if [[ $@ ]]; then
    args=$@
  else
    args=`cat $f`
  fi

  cw=$(current_workspace)

  args=${args//@/$cw}
  args=${args//€/${cw,,}}

  echo "rez env $args"
  rez env $args
}

function rl() {
  f=~/.userrezlaunch

  if [[ $@ ]]; then
    args=$@
    echo $@ > "$f"
  else
    args=`cat $f`
  fi

  re_nolog $args -- €
}

function man() {
  f=~/.currentman

  if [[ $@ ]]; then
    args=$@
    echo $@ > "$f"
  else
    args=`cat $f`
  fi

  /usr/bin/man $args
}

alias m=man



# export WORKON_HOME=$HOME/.virtualenvs
# export PROJECT_HOME=$HOME/Devel
# source /usr/bin/virtualenvwrapper.sh

source ~/.bin/git-prompt.sh

[ -f ~/.fzf.bash ] && source ~/.fzf.bash

## git_ps1 timeout -- requires bash 4.3:
# _timeout() { ( set +b; sleep "$1" & "${@:2}" & wait -n; r=$?; kill -9 `jobs -p`; exit $r; ) }
# eval "__orig$(declare -f __git_ps1)" && __git_ps1() { ( git() { timeout 0.3 /usr/bin/git "$@"; }; _timeout 0.5 __orig__git_ps1 "$@"; ) }
## bash <4.3 ~workaround:
export -f __git_ps1
export -f __git_eread

export GIT_PS1_SHOWDIRTYSTATE=1
export GIT_PS1_SHOWUNTRACKEDFILES=1
# export PS1=${PS1:0:-2}'\[\033[0;31m\]$(__git_ps1)\[\033[0m\] > '  # no timeout or bash 4.3
export PS1=${PS1:0:-2}'\[\033[0;31m\]$(timeout 0.5 bash -c __git_ps1)\[\033[0m\] > '  # timeout with bash <4.3

set -o vi

export PATH="$PATH:~/.bin"

source ~/.bin/alias-completion.sh

[[ $HOSTNAME = "frapcanim2013.mikros.int" ]] && export REZ_DEV_ROOT=/datas/jbi/packages/mikros/env/rez/dev/
# [[ $HOSTNAME = "frapcanim2013.mikros.int" ]] && export REZ_CONFIG_FILE=/homes/jbi/.rezconfig.py
# [[ $HOSTNAME = "frapcanim2013.mikros.int" ]] && export REZ_USE_MEMCACHED=1
